# Learning Django step by step

0. Install/ Update Python ----------

1. Installing Django ----------
- install/ upgrade pip  
	# $ python3 -m pip install --upgrade pip
- make venv and activate it
	# $ python3 -m venv .venv
	# $ source .venv/bin/activate
- install Django
	# $ python3 -m pip install Django
- verify installation
	# $ python3 -m django --version

2. Creating a project ----------
- cd into your project directory and then install django project
	# $ django-admin startproject projectlx
- above code will return nothing on success
- see what inside the 'projectlx'
--------------------------------
| projectlx/		# root directory; container for project; name doesn't matter; rename if you want to
    | projectlx/	# actual python package for project; 
        | __init__.py		# every python package contains this empty file;
        | settings.py		# settings/ configurations for this project;
        | urls.py		# URL declarations for this project; aka 'table of content'; 
        | asgi.py		# entry point for ASGI-compatible web servers to serve proj.; Asynchronous Server Gateway Interface;
        | wsgi.py		# entry point for WSGI-compatible web servers to serve proj.; Web Server Gateway Interface;
    | manage.py		# command-line utility; interact with project; 
---------------------------------

3. Start The development server ----------
- cd into your project root directory
- execute runserver command from manage.py
	# $ python3 manage.py runserver
- now visit http://127.0.0.1:8000/ ; this is production server; for deployment use apache
- changing port numbers; use port number as argument
	# $ python manage.py runserver 8080
- if you want to change ip too send it as argument; 0 for 0.0.0.0
	# $ python manage.py runserver 0:8080
- production server reloads automatically; need to reload in case of adding file

4. Creating the Polls app ----------
- Each application you write in Django consists of a Python package
- An app is a web application that does something.;  An app can be in multiple projects.; Your apps can live anywhere on your Python path
- A project is a collection of configuration and apps for a particular website.; A project can contain multiple apps
- create poll app
	# $ python3 manage.py startapp polls
- this will return nothing on success
--------------------------------
| projectlx/		# root directory;
    | polls/			# app directory;
    	| __init__.py
    	| admin.py
    	| apps.py
    	| migrations/
            | __init__.py
    	| models.py
    	| tests.py
    	| views.py
--------------------------------

5. Writing your first view ----------
- open the file 'polls/views.py' and put some code in it
- now do some url mapping; make a new file 'urls.py'

6. Database setup ----------
- Open up projectlx/settings.py. It’s a normal Python module with module-level variables representing Django settings.
- By default, the configuration uses SQLite.
- If you wish to use another database; install the appropriate database bindings and change the following keys in the DATABASES 'default' item to match your database connection settings:
- ENGINE – Either 
	'django.db.backends.sqlite3', 
	'django.db.backends.postgresql', 
	'django.db.backends.mysql',
	'django.db.backends.oracle', or
	etc.
- NAME – The name of your database. If you’re using SQLite, the database will be a file on your computer;
	The default value, ```*BASE_DIR / 'db.sqlite3'*```, will store the file in your project directory.

- DATABASES = {
      'default': {
          'ENGINE': 'django.db.backends.sqlite3',
          'NAME': BASE_DIR / 'db.sqlite3',  # default db; 'mydatabase',
      }
  }

- run the following command to database create table
	# $ python3 manage.py migrate

7. Creating models ----------
- create models as much as you want in {appDirectory}=[polls]/models.py
- make a class of model that extends/ inherits *models.Model* 
- eg.:
	class Choice(models.Model):
		question = models.ForeignKey(Question, on_delete=models.CASCADE)
		choice = models.CharField(max_length=200)
		vote = models.IntegerField(default=0)

8. Activating models ----------
- first we need to tell our project that the polls app is installed.
- To include the app in our project, we need to add a reference to its configuration class in the *INSTALLED_APPS* setting.
- edit 'INSTALLED_APPS' on 'projectlx/settings.py' and add 'PollsConfig' class is in 'polls/apps.py' so dotted path is polls.apps.PollsConfig'
	# $ python3 manage.py makemigrations polls
- this command has generated migratration named '0001_initial.py' in 'migratrations/' directory
- The sqlmigrate command takes migration names and returns their SQL
	# $ python3 manage.py sqlmigrate polls 0001
- Now, run migrate again to create those model tables in your database
	# $ python3 manage.py migrate
- Three step guide to make changes in Model 
	- Change your models (in models.py).
	- Run python manage.py makemigrations to create migrations for those changes
	- Run python manage.py migrate to apply those changes to the database

===
# Introducing the Django Admin
---
9. Creating an admin user ----------
- First we’ll need to create a user who can login to the admin site.
	# $ python3 manage.py createsuperuser
	# Username (leave blank to use 'intel'): admin
	# Email address: admin@project.lx
	# Password: ******** 
	# Password (again): ********
- Now login to *http://127.0.0.1:8000/admin/* with above credentials
- now as you can see there is no poll app
- we need to tell the admin that 'Question objects' have an admin interface. To do this, open the 'polls/admin.py' file,
- and register Your 'Question Model', and reload admin site


10. Explore the free admin functionality ----------
- Here you can add edit or delete models registred in admin side.

11. Making New Views and Routes (Path) for them ---------
- (detail, results and vote) and passing question id (que_id) to them	
- go to 'views.py' file in your app directory and make three functions accepting two arguments (request, que_id) respectedly 
- go to 'urls.py' in your app directory (make sure that is already linked with packages 'urls.py')
- add 'path' function with three parameters
	-- 1. for path/ for route pattern matching string eg.: 	'<int:que_id>' where 'int' is type of data and 'que_id' is for naming that data
	-- 2. for specifying views eg.: views.detail (make sure you've imported 'views' from same (app) directory)
	-- 3. name of the view eg.: name='detail'; this is kwargs (keyword argument)

12. Using Django's Template System --------
- Make directory name 'template', that django finds default for templates
- make another directory name same as app name inside that 'template/app_name'
- now make/use *.html pages inside in this folder
- here app's name is polls, so this will look like: 'polls/index.html'
- in view page import loader or render from django.template or django.shortcuts respectively and send some data to the template too eg.: 'que_list' and 'que'
	--> template = loader.get_template('polls/index.html')
	--> return HttpResponse(template.render({'que_list': latest_ques_list}, request))
	# or
	--> return render(request, 'polls/index.html', {'que': que_detail})
- here you can template namespacing

13. Using Model for Retriving Data ---------
- import Model (Question) from .models, so here we can use them
- here you can use, Model.objects query or django's shortcut method that accept model as first argument
- for that you need to import get_object_or_404 from django.shortcuts

14. Removing hardcoded URLs in templates ---------
- here we use route names that we created earleir in 11.3
- django template tag {% url %}
- add in 'urls.py' of app directory, app_name = 'polls'  # Namespacing URL names \

15. Using Form in Django --------
- use django's url tag for action
- add {% csrf_token %} ( cross-site request forgery token ), to prevent cross-site scripting (xss)
- you can use {% forloop.counter %}
- also you can use {% widthratio min max total %} (min*max/total) for ratios/percentages

16. Getting forms values in View --------
- use request.POST (a dictionary-like object) eg.: request.POST['choice']
- always keep in mind when dealing with POST request, return HttpResponseRedirect() and reverse() functions from django's 'http' and 'shortcut' respectively
	-- put render() method inside HttpsResponseRedirect()
	-- pass two parameters with render() method
		I.  template name eg.: 'polls:results'
		II. data inside named tuple as args

17. Using generic views -----------
- here as we've created, we know that our three views are redundant.
- they are accepting que_id, using it making database operations
- this is very common web development practise
	-- getting data from database according to a parameter passed in the url,
	-- loading template and returning rendered template
- to get rid of it django provides shortcut, called the 'generic views'
- generic views abstract common patterns to the point where you don't need to write python code to write an app.
- for that we need to perform some tasks
	Convert the URLconf.
	Delete some of the old, unneeded views.
	Introduce new views based on Django’s generic views.

18. Making Generic Views --------
- Amend URLconf, via updating applications 'urls.py'
	-- change the route, passing parameters(name of the matched pattern in path string)
	-- before : '<int:question_id>/', after : change it to '<int:pk>'
	-- 'DetailView' generic view expects the primary key captured from URL to be called 'pk'.
- Amend Views, via updating applications 'views.py'
- to make generic views follow these steps:
	-- import generic class/module from django.views
	-- make new classes for views; and put their name properly post fixing View
	-- inherit generic class according to your requirement eg.: generic.ListView, generic.DetailView
	-- We’re using two generic views here: ListView and DetailView. 
	-- Respectively, those two views abstract the concepts of 
		[I].  “display a list of objects” and 
		[II]. “display a detail page for a particular type of object.”
	eg.: class IndexView(generic.ListView): ---  # change default settings
	-- By default, the 'DetailView' generic view uses a template called ``<app name>/<model name>_detail.html``.
	-- In our case, it would use the template "polls/detail.html".
	eg.: template_name = 'polls/details.html'
	-- By default, both generic views passes context object same as model,
	--  to change use 'context_object_name' property of view class.

19. Introducing automated testing ---------
- understand automated tests; Tests are routines that check the operation of your code.
- Why you need to create tests
	- Tests will save you time.
	- Tests don’t just identify problems, they prevent them
	- Tests make your code more attractive
	- Tests help teams work together
- Basic testing strategies
	- follow a discipline called “test-driven development”
	- write tests, before write code	

20. Writing our first test ----------
- first find a bug; here we found our bug that when we render 'index.html' we show all recent questions here
- but what if question is posted for future publision; for that now we will write our first test
- Create a test to expose the bug
- A conventional place for an application's tests is in the application's 'tests.py' file.
	-- create a class with appropriate name;
	-- suppose we want to test a model, it will be like 'QuestionModelTests' that inherits 'TestCase'
	eg.: class QuestionModelTests(TestCase):---  # it is compulsury to inherit TestCase
	-- make test cases and put them in 'self.assertIs(testable_method_or_something, What_it_should_return_or_results)'
	eg.: self.assertIs(future_question.was_published_recently(), False)

21. Running tests ---------
- to run our test, perform these command
	# $ python3 manage.py test polls  # polls = 'application_name'

22. Test a view -------
- to perform the view test
- setup test environment via running setup_test_environment() ; import setup_test_environment from django.test.utils
- now make client object via importing Client from django.test
- now check the response comming from client class using get() method of client object
- no need to perform hard urls, use reverse method from django.urls
- to check 
	what Http status code is it returning use 'response.status_code'
	content is getting on page use 'response.content'
	context/(DB model returning) is getting use 'response.context['context_object_name']  # refere 18.

23. Part - 6 Customize your app’s look and feel
- adding your styles, images and all things to make site look greater.
- make a directory 'same name as application name' (polls), inside a 'static' directory (make this one too), inside your applications directory 
- now put all your *.css, *.js, or any multimedia file in this folder
- use these files in your *.html files, {% load static %} helper and then use
- static file namespacing {% static 'polls/*.css/js/multimedia_file' %}

24. Part - 7 Customize the admin form
- Adding Fields wise data
	-- from django.contrib import admin
	## class QuestionAdmin(admin.ModelAdmin):
    	##	fields = ['pub_date', 'question_text']
	--
	## admin.site.register(Question, QuestionAdmin)  # common
- or this way
	## fieldsets = [(None,{'fields': ['question_text']}),('Date information', {'fields': ['pub_date']}),]
- Merging two Models
	## class ChoiceInline(admin.StackedInline):
    	##	model = Choice
    	## 	extra = 3
	## class QuestionAdmin(admin.ModelAdmin):
	## 	---
	##	inlines = [ChoiceInline]
- or use Tebular form
	## class ChoiceInline(admin.TabularInline):
	##	---
- changing the look of list of all data from model; put below code in QuestionAdmin class
	## list_display = ('question_text', 'pub_date', 'was_published_recently')
- adding search feild in QuestionAdmin class
	## search_fields = ['question_text']
- Customizing Admin Side look and feel make a directory named templates in root directory;
- inside this directory make another directory named admin; now put here your custom .html page
- open settings.py of your main projects directory; in this file find 'TEMPLATES' list and add the following data too;
	## 'DIRS': [BASE_DIR / 'templates'] 

===
# Advance Tutorial
---
25. How to write reusable apps
- Installing some prerequisites
	# $ python3 -m pip install setuptools
- Packaging your app; preparing your app in a specific format that can be easily installed and used.
	1. Create a new directory out side package directory prefixing name with 'django' eg.: django-polls
	2. Move the app directory in the directory; and make a README.rst (reStructured Text); and put some details regaring app in this file.
	3. make a licence, pyproject.toml, setup.cfg, setup.py, MANIFEST.in
	4. then perform this # $ python3 setup.py sdist
- Using your own package
	1. Installed it. # $ python3 -m pip install --user django-polls/dist/django-polls-0.1.tar.gz
	2. Uninstall it. # $ python3 -m pip uninstall django-polls
- Now you can Publish your app

==================================================================
