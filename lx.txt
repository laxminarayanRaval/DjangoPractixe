# Learning Django step by step

0. Install/ Update Python ----------

1. Installing Django ----------
- install/ upgrade pip  
	# $ python3 -m pip install --upgrade pip
- make venv and activate it
	# $ python3 -m venv .venv
	# $ source .venv/bin/activate
- install Django
	# $ python3 -m pip install Django
- verify installation
	# $ python3 -m django --version

2. Creating a project ----------
- cd into your project directory and then install django project
	# $ django-admin startproject projectlx
- above code will return nothing on success
- see what inside the 'projectlx'
--------------------------------
| projectlx/		# root directory; container for project; name doesn't matter; rename if you want to
    | projectlx/	# actual python package for project; 
        | __init__.py		# every python package contains this empty file;
        | settings.py		# settings/ configurations for this project;
        | urls.py		# URL declarations for this project; aka 'table of content'; 
        | asgi.py		# entry point for ASGI-compatible web servers to serve proj.; Asynchronous Server Gateway Interface;
        | wsgi.py		# entry point for WSGI-compatible web servers to serve proj.; Web Server Gateway Interface;
    | manage.py		# command-line utility; interact with project; 
---------------------------------

3. Start The development server ----------
- cd into your project root directory
- execute runserver command from manage.py
	# $ python3 manage.py runserver
- now visit http://127.0.0.1:8000/ ; this is production server; for deployment use apache
- changing port numbers; use port number as argument
	# $ python manage.py runserver 8080
- if you want to change ip too send it as argument; 0 for 0.0.0.0
	# $ python manage.py runserver 0:8080
- production server reloads automatically; need to reload in case of adding file

4. Creating the Polls app ----------
- Each application you write in Django consists of a Python package
- An app is a web application that does something.;  An app can be in multiple projects.; Your apps can live anywhere on your Python path
- A project is a collection of configuration and apps for a particular website.; A project can contain multiple apps
- create poll app
	# $ python3 manage.py startapp polls
- this will return nothing on success
--------------------------------
| projectlx/		# root directory;
    | polls/			# app directory;
    	| __init__.py
    	| admin.py
    	| apps.py
    	| migrations/
            | __init__.py
    	| models.py
    	| tests.py
    	| views.py
--------------------------------

5. Writing your first view ----------
- open the file 'polls/views.py' and put some code in it
- now do some url mapping; make a new file 'urls.py'

6. Database setup ----------
- Open up projectlx/settings.py. It’s a normal Python module with module-level variables representing Django settings.
- By default, the configuration uses SQLite.
- If you wish to use another database; install the appropriate database bindings and change the following keys in the DATABASES 'default' item to match your database connection settings:
- ENGINE – Either 
	'django.db.backends.sqlite3', 
	'django.db.backends.postgresql', 
	'django.db.backends.mysql',
	'django.db.backends.oracle', or
	etc.
- NAME – The name of your database. If you’re using SQLite, the database will be a file on your computer;
	The default value, ```*BASE_DIR / 'db.sqlite3'*```, will store the file in your project directory.

- DATABASES = {
      'default': {
          'ENGINE': 'django.db.backends.sqlite3',
          'NAME': BASE_DIR / 'db.sqlite3',  # default db; 'mydatabase',
      }
  }

- run the following command to database create table
	# $ python3 manage.py migrate

7. Creating models ----------
- create models as much as you want in {appDirectory}=[polls]/models.py
- make a class of model that extends/ inherits *models.Model* 
- eg.:
	class Choice(models.Model):
		que = models.ForeignKey(Question, on_delete=models.CASCADE)
		cho = models.CharField(max_length=200)
		vot = models.IntegerField(default=0)

8. Activating models ----------
- first we need to tell our project that the polls app is installed.
- To include the app in our project, we need to add a reference to its configuration class in the *INSTALLED_APPS* setting.
- edit 'INSTALLED_APPS' on 'projectlx/settings.py' and add 'PollsConfig' class is in 'polls/apps.py' so dotted path is polls.apps.PollsConfig'
	# $ python3 manage.py makemigrations polls
- this command has generated migratration named '0001_initial.py' in 'migratrations/' directory
- The sqlmigrate command takes migration names and returns their SQL
	# $ python3 manage.py sqlmigrate polls 0001
- Now, run migrate again to create those model tables in your database
	# $ python3 manage.py migrate
- Three step guide to make changes in Model
	- Change your models (in models.py).
	- Run python manage.py makemigrations to create migrations for those changes
	- Run python manage.py migrate to apply those changes to the database

===
# Introducing the Django Admin
---
9. Creating an admin user ----------
- First we’ll need to create a user who can login to the admin site.
	# $ python3 manage.py createsuperuser
	# Username (leave blank to use 'intel'): admin
	# Email address: admin@project.lx
	# Password: ******** 
	# Password (again): ********
- Now login to *http://127.0.0.1:8000/admin/* with above credentials
- now as you can see there is no poll app
- we need to tell the admin that 'Question objects' have an admin interface. To do this, open the 'polls/admin.py' file,
- and register Your 'Question Model', and reload admin site


10. Explore the free admin functionality ----------








####### learn this things
# Using enumerate()
# The xrange()function
# Variable scope and Returning Values
# Sorting
# Alternate Keys
# Handling multiple exceptions
# The standard exception hierarchy using Modules
# Web development
# Introduction to Django Web Framework
# Features of Django

## Installing Django  # done
# MVC model
# HTTP concepts
# Views
# URL Mapping
# Django Template Language
# Utilities of Templates
# Creating Template Objects
# Tags, Variables and Filters
# Rendering Templates
# Template Inheritance
# Form Handling
# Form validation and Error Messages
# Form Display
# Django Models
# Model Fields
# Model Inheritance
# CRUD on DB
# Primary keys and the Model
# Dynamic Webpages
# Toggle Hidden Content
# jQuery and AJAX integration
# Serialization and Deserialization
# Django REST Framework
# Serializer class
# Model Serializers
# REST APIs
# XML-RPC
# XML, parsing object to XML and back
# JSON, parsing object to JSON and back

